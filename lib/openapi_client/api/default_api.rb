=begin
#Fraud_detection

#Challenge project

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Checks if the given data is good or bad
    # @param data [String] Data to be checked
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def classifications_check(data, opts = {})
      classifications_check_with_http_info(data, opts)
      nil
    end

    # Checks if the given data is good or bad
    # @param data [String] Data to be checked
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def classifications_check_with_http_info(data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.classifications_check ...'
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling DefaultApi.classifications_check"
      end
      # resource path
      local_var_path = '/check/{data}'.sub('{' + 'data' + '}', CGI.escape(data.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.classifications_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#classifications_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a classification
    # @param classifications_create_new_request [ClassificationsCreateNewRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def classifications_create_new(classifications_create_new_request, opts = {})
      classifications_create_new_with_http_info(classifications_create_new_request, opts)
      nil
    end

    # Create a classification
    # @param classifications_create_new_request [ClassificationsCreateNewRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def classifications_create_new_with_http_info(classifications_create_new_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.classifications_create_new ...'
      end
      # verify the required parameter 'classifications_create_new_request' is set
      if @api_client.config.client_side_validation && classifications_create_new_request.nil?
        fail ArgumentError, "Missing the required parameter 'classifications_create_new_request' when calling DefaultApi.classifications_create_new"
      end
      # resource path
      local_var_path = '/classifications'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(classifications_create_new_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.classifications_create_new",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#classifications_create_new\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Checks if the given data is good or bad
    # @param classifications_show_request [ClassificationsShowRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def classifications_show(classifications_show_request, opts = {})
      classifications_show_with_http_info(classifications_show_request, opts)
      nil
    end

    # Checks if the given data is good or bad
    # @param classifications_show_request [ClassificationsShowRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def classifications_show_with_http_info(classifications_show_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.classifications_show ...'
      end
      # verify the required parameter 'classifications_show_request' is set
      if @api_client.config.client_side_validation && classifications_show_request.nil?
        fail ArgumentError, "Missing the required parameter 'classifications_show_request' when calling DefaultApi.classifications_show"
      end
      # resource path
      local_var_path = '/check'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(classifications_show_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.classifications_show",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#classifications_show\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
